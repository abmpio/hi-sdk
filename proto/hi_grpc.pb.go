// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: hi.proto

package hi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hi_HealthCheck_FullMethodName = "/proto.Hi/HealthCheck"
)

// HiClient is the client API for Hi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type hiClient struct {
	cc grpc.ClientConnInterface
}

func NewHiClient(cc grpc.ClientConnInterface) HiClient {
	return &hiClient{cc}
}

func (c *hiClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Hi_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiServer is the server API for Hi service.
// All implementations must embed UnimplementedHiServer
// for forward compatibility.
type HiServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedHiServer()
}

// UnimplementedHiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHiServer struct{}

func (UnimplementedHiServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedHiServer) mustEmbedUnimplementedHiServer() {}
func (UnimplementedHiServer) testEmbeddedByValue()            {}

// UnsafeHiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiServer will
// result in compilation errors.
type UnsafeHiServer interface {
	mustEmbedUnimplementedHiServer()
}

func RegisterHiServer(s grpc.ServiceRegistrar, srv HiServer) {
	// If the following call pancis, it indicates UnimplementedHiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hi_ServiceDesc, srv)
}

func _Hi_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hi_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hi_ServiceDesc is the grpc.ServiceDesc for Hi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hi",
	HandlerType: (*HiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Hi_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hi.proto",
}

const (
	CodeValueService_FindListByCodeType_FullMethodName = "/proto.CodeValueService/FindListByCodeType"
	CodeValueService_FindOneByCode_FullMethodName      = "/proto.CodeValueService/FindOneByCode"
)

// CodeValueServiceClient is the client API for CodeValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// code value service
type CodeValueServiceClient interface {
	FindListByCodeType(ctx context.Context, in *FindListByCodeTypeRequest, opts ...grpc.CallOption) (*FindListByCodeTypeResponse, error)
	FindOneByCode(ctx context.Context, in *FindOneByCodeRequest, opts ...grpc.CallOption) (*FindOneByCodeResponse, error)
}

type codeValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeValueServiceClient(cc grpc.ClientConnInterface) CodeValueServiceClient {
	return &codeValueServiceClient{cc}
}

func (c *codeValueServiceClient) FindListByCodeType(ctx context.Context, in *FindListByCodeTypeRequest, opts ...grpc.CallOption) (*FindListByCodeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindListByCodeTypeResponse)
	err := c.cc.Invoke(ctx, CodeValueService_FindListByCodeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeValueServiceClient) FindOneByCode(ctx context.Context, in *FindOneByCodeRequest, opts ...grpc.CallOption) (*FindOneByCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOneByCodeResponse)
	err := c.cc.Invoke(ctx, CodeValueService_FindOneByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeValueServiceServer is the server API for CodeValueService service.
// All implementations must embed UnimplementedCodeValueServiceServer
// for forward compatibility.
//
// code value service
type CodeValueServiceServer interface {
	FindListByCodeType(context.Context, *FindListByCodeTypeRequest) (*FindListByCodeTypeResponse, error)
	FindOneByCode(context.Context, *FindOneByCodeRequest) (*FindOneByCodeResponse, error)
	mustEmbedUnimplementedCodeValueServiceServer()
}

// UnimplementedCodeValueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodeValueServiceServer struct{}

func (UnimplementedCodeValueServiceServer) FindListByCodeType(context.Context, *FindListByCodeTypeRequest) (*FindListByCodeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListByCodeType not implemented")
}
func (UnimplementedCodeValueServiceServer) FindOneByCode(context.Context, *FindOneByCodeRequest) (*FindOneByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneByCode not implemented")
}
func (UnimplementedCodeValueServiceServer) mustEmbedUnimplementedCodeValueServiceServer() {}
func (UnimplementedCodeValueServiceServer) testEmbeddedByValue()                          {}

// UnsafeCodeValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeValueServiceServer will
// result in compilation errors.
type UnsafeCodeValueServiceServer interface {
	mustEmbedUnimplementedCodeValueServiceServer()
}

func RegisterCodeValueServiceServer(s grpc.ServiceRegistrar, srv CodeValueServiceServer) {
	// If the following call pancis, it indicates UnimplementedCodeValueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CodeValueService_ServiceDesc, srv)
}

func _CodeValueService_FindListByCodeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindListByCodeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeValueServiceServer).FindListByCodeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeValueService_FindListByCodeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeValueServiceServer).FindListByCodeType(ctx, req.(*FindListByCodeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeValueService_FindOneByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeValueServiceServer).FindOneByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeValueService_FindOneByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeValueServiceServer).FindOneByCode(ctx, req.(*FindOneByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeValueService_ServiceDesc is the grpc.ServiceDesc for CodeValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CodeValueService",
	HandlerType: (*CodeValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindListByCodeType",
			Handler:    _CodeValueService_FindListByCodeType_Handler,
		},
		{
			MethodName: "FindOneByCode",
			Handler:    _CodeValueService_FindOneByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hi.proto",
}
