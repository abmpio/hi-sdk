// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: hi.proto

package hi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ValueFieldType 的枚举定义
type ValueFieldType int32

const (
	ValueFieldType_VALUE_FIELD_TYPE_UNSPECIFIED ValueFieldType = 0 // 默认类型，未指定
	ValueFieldType_VALUE_FIELD_TYPE_STRING      ValueFieldType = 1 // 字符串
	ValueFieldType_VALUE_FIELD_TYPE_BOOLEAN     ValueFieldType = 2 // 布尔值
	ValueFieldType_VALUE_FIELD_TYPE_FLOAT64     ValueFieldType = 3 // 浮点数
	ValueFieldType_VALUE_FIELD_TYPE_DATETIME    ValueFieldType = 4 // 日期时间
)

// Enum value maps for ValueFieldType.
var (
	ValueFieldType_name = map[int32]string{
		0: "VALUE_FIELD_TYPE_UNSPECIFIED",
		1: "VALUE_FIELD_TYPE_STRING",
		2: "VALUE_FIELD_TYPE_BOOLEAN",
		3: "VALUE_FIELD_TYPE_FLOAT64",
		4: "VALUE_FIELD_TYPE_DATETIME",
	}
	ValueFieldType_value = map[string]int32{
		"VALUE_FIELD_TYPE_UNSPECIFIED": 0,
		"VALUE_FIELD_TYPE_STRING":      1,
		"VALUE_FIELD_TYPE_BOOLEAN":     2,
		"VALUE_FIELD_TYPE_FLOAT64":     3,
		"VALUE_FIELD_TYPE_DATETIME":    4,
	}
)

func (x ValueFieldType) Enum() *ValueFieldType {
	p := new(ValueFieldType)
	*p = x
	return p
}

func (x ValueFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_hi_proto_enumTypes[0].Descriptor()
}

func (ValueFieldType) Type() protoreflect.EnumType {
	return &file_hi_proto_enumTypes[0]
}

func (x ValueFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueFieldType.Descriptor instead.
func (ValueFieldType) EnumDescriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{0}
}

type HealthCheckResponse_ServiceStatus int32

const (
	HealthCheckResponse_UNKNOWN         HealthCheckResponse_ServiceStatus = 0
	HealthCheckResponse_SERVING         HealthCheckResponse_ServiceStatus = 1
	HealthCheckResponse_NOT_SERVING     HealthCheckResponse_ServiceStatus = 2
	HealthCheckResponse_SERVICE_UNKNOWN HealthCheckResponse_ServiceStatus = 3
)

// Enum value maps for HealthCheckResponse_ServiceStatus.
var (
	HealthCheckResponse_ServiceStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
		3: "SERVICE_UNKNOWN",
	}
	HealthCheckResponse_ServiceStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVING":         1,
		"NOT_SERVING":     2,
		"SERVICE_UNKNOWN": 3,
	}
)

func (x HealthCheckResponse_ServiceStatus) Enum() *HealthCheckResponse_ServiceStatus {
	p := new(HealthCheckResponse_ServiceStatus)
	*p = x
	return p
}

func (x HealthCheckResponse_ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hi_proto_enumTypes[1].Descriptor()
}

func (HealthCheckResponse_ServiceStatus) Type() protoreflect.EnumType {
	return &file_hi_proto_enumTypes[1]
}

func (x HealthCheckResponse_ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_ServiceStatus.Descriptor instead.
func (HealthCheckResponse_ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{2, 0}
}

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	mi := &file_hi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{0}
}

func (x *BaseResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_hi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HealthCheckResponse_ServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.HealthCheckResponse_ServiceStatus" json:"status,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_hi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{2}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_ServiceStatus {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_UNKNOWN
}

// 请求消息类型
type FindCodeValueListByCodeTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App      string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`           // 应用标识
	CodeType string `protobuf:"bytes,2,opt,name=codeType,proto3" json:"codeType,omitempty"` // 代码类型
}

func (x *FindCodeValueListByCodeTypeRequest) Reset() {
	*x = FindCodeValueListByCodeTypeRequest{}
	mi := &file_hi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindCodeValueListByCodeTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCodeValueListByCodeTypeRequest) ProtoMessage() {}

func (x *FindCodeValueListByCodeTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCodeValueListByCodeTypeRequest.ProtoReflect.Descriptor instead.
func (*FindCodeValueListByCodeTypeRequest) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{3}
}

func (x *FindCodeValueListByCodeTypeRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *FindCodeValueListByCodeTypeRequest) GetCodeType() string {
	if x != nil {
		return x.CodeType
	}
	return ""
}

type FindOneCodeValueByCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App      string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`           // 应用标识
	CodeType string `protobuf:"bytes,2,opt,name=codeType,proto3" json:"codeType,omitempty"` // 代码类型
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`         // 代码
}

func (x *FindOneCodeValueByCodeRequest) Reset() {
	*x = FindOneCodeValueByCodeRequest{}
	mi := &file_hi_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOneCodeValueByCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneCodeValueByCodeRequest) ProtoMessage() {}

func (x *FindOneCodeValueByCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneCodeValueByCodeRequest.ProtoReflect.Descriptor instead.
func (*FindOneCodeValueByCodeRequest) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{4}
}

func (x *FindOneCodeValueByCodeRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *FindOneCodeValueByCodeRequest) GetCodeType() string {
	if x != nil {
		return x.CodeType
	}
	return ""
}

func (x *FindOneCodeValueByCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// 响应消息类型
type CodeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`           // 代码
	ShortName string `protobuf:"bytes,2,opt,name=shortName,proto3" json:"shortName,omitempty"` // 简称
	FullName  string `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName,omitempty"`   // 全称
	Memo      string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`           // 备注
}

func (x *CodeValue) Reset() {
	*x = CodeValue{}
	mi := &file_hi_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeValue) ProtoMessage() {}

func (x *CodeValue) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeValue.ProtoReflect.Descriptor instead.
func (*CodeValue) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{5}
}

func (x *CodeValue) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CodeValue) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *CodeValue) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *CodeValue) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type FindCodeValueListByCodeTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeValues []*CodeValue `protobuf:"bytes,1,rep,name=codeValues,proto3" json:"codeValues,omitempty"` // 返回的代码值列表
}

func (x *FindCodeValueListByCodeTypeResponse) Reset() {
	*x = FindCodeValueListByCodeTypeResponse{}
	mi := &file_hi_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindCodeValueListByCodeTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCodeValueListByCodeTypeResponse) ProtoMessage() {}

func (x *FindCodeValueListByCodeTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCodeValueListByCodeTypeResponse.ProtoReflect.Descriptor instead.
func (*FindCodeValueListByCodeTypeResponse) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{6}
}

func (x *FindCodeValueListByCodeTypeResponse) GetCodeValues() []*CodeValue {
	if x != nil {
		return x.CodeValues
	}
	return nil
}

type FindOneCodeValueByCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeValue *CodeValue `protobuf:"bytes,1,opt,name=codeValue,proto3" json:"codeValue,omitempty"` // 单个代码值
}

func (x *FindOneCodeValueByCodeResponse) Reset() {
	*x = FindOneCodeValueByCodeResponse{}
	mi := &file_hi_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOneCodeValueByCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneCodeValueByCodeResponse) ProtoMessage() {}

func (x *FindOneCodeValueByCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneCodeValueByCodeResponse.ProtoReflect.Descriptor instead.
func (*FindOneCodeValueByCodeResponse) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{7}
}

func (x *FindOneCodeValueByCodeResponse) GetCodeValue() *CodeValue {
	if x != nil {
		return x.CodeValue
	}
	return nil
}

// FindListByAppName 请求消息
type FindSettingListByAppNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNameList []string `protobuf:"bytes,1,rep,name=appNameList,proto3" json:"appNameList,omitempty"` // 多个应用名称
}

func (x *FindSettingListByAppNameRequest) Reset() {
	*x = FindSettingListByAppNameRequest{}
	mi := &file_hi_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindSettingListByAppNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSettingListByAppNameRequest) ProtoMessage() {}

func (x *FindSettingListByAppNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSettingListByAppNameRequest.ProtoReflect.Descriptor instead.
func (*FindSettingListByAppNameRequest) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{8}
}

func (x *FindSettingListByAppNameRequest) GetAppNameList() []string {
	if x != nil {
		return x.AppNameList
	}
	return nil
}

// FindListByAppName 响应消息
type FindSettingListByAppNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*Setting `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"` // 返回的设置列表
}

func (x *FindSettingListByAppNameResponse) Reset() {
	*x = FindSettingListByAppNameResponse{}
	mi := &file_hi_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindSettingListByAppNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSettingListByAppNameResponse) ProtoMessage() {}

func (x *FindSettingListByAppNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSettingListByAppNameResponse.ProtoReflect.Descriptor instead.
func (*FindSettingListByAppNameResponse) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{9}
}

func (x *FindSettingListByAppNameResponse) GetSettings() []*Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

// FindByName 请求消息
type FindSettingByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName string `protobuf:"bytes,1,opt,name=appName,proto3" json:"appName,omitempty"` // 应用名称
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       // 设置名称
}

func (x *FindSettingByNameRequest) Reset() {
	*x = FindSettingByNameRequest{}
	mi := &file_hi_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindSettingByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSettingByNameRequest) ProtoMessage() {}

func (x *FindSettingByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSettingByNameRequest.ProtoReflect.Descriptor instead.
func (*FindSettingByNameRequest) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{10}
}

func (x *FindSettingByNameRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *FindSettingByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// FindByName 响应消息
type FindSettingByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"` // 返回的单个设置
}

func (x *FindSettingByNameResponse) Reset() {
	*x = FindSettingByNameResponse{}
	mi := &file_hi_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindSettingByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSettingByNameResponse) ProtoMessage() {}

func (x *FindSettingByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSettingByNameResponse.ProtoReflect.Descriptor instead.
func (*FindSettingByNameResponse) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{11}
}

func (x *FindSettingByNameResponse) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// Setting 结构定义
type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName       string         `protobuf:"bytes,1,opt,name=appName,proto3" json:"appName,omitempty"`                                // 应用名称
	ValueType     ValueFieldType `protobuf:"varint,2,opt,name=valueType,proto3,enum=proto.ValueFieldType" json:"valueType,omitempty"` // 值的类型
	ProtectedInUi bool           `protobuf:"varint,3,opt,name=protectedInUi,proto3" json:"protectedInUi,omitempty"`                   // 是否是受保护的 UI 属性
	Name          string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                      // 键名
	// Types that are assignable to Value:
	//
	//	*Setting_StringValue
	//	*Setting_BooleanValue
	//	*Setting_Float64Value
	//	*Setting_DatetimeValue
	Value isSetting_Value `protobuf_oneof:"value"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	mi := &file_hi_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_hi_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_hi_proto_rawDescGZIP(), []int{12}
}

func (x *Setting) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Setting) GetValueType() ValueFieldType {
	if x != nil {
		return x.ValueType
	}
	return ValueFieldType_VALUE_FIELD_TYPE_UNSPECIFIED
}

func (x *Setting) GetProtectedInUi() bool {
	if x != nil {
		return x.ProtectedInUi
	}
	return false
}

func (x *Setting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Setting) GetValue() isSetting_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Setting) GetStringValue() string {
	if x, ok := x.GetValue().(*Setting_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Setting) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*Setting_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *Setting) GetFloat64Value() float64 {
	if x, ok := x.GetValue().(*Setting_Float64Value); ok {
		return x.Float64Value
	}
	return 0
}

func (x *Setting) GetDatetimeValue() string {
	if x, ok := x.GetValue().(*Setting_DatetimeValue); ok {
		return x.DatetimeValue
	}
	return ""
}

type isSetting_Value interface {
	isSetting_Value()
}

type Setting_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=stringValue,proto3,oneof"` // 字符串类型的值
}

type Setting_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,6,opt,name=booleanValue,proto3,oneof"` // 布尔类型的值
}

type Setting_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,7,opt,name=float64Value,proto3,oneof"` // 浮点数类型的值
}

type Setting_DatetimeValue struct {
	DatetimeValue string `protobuf:"bytes,8,opt,name=datetimeValue,proto3,oneof"` // 日期时间类型的值 (ISO 8601 格式)
}

func (*Setting_StringValue) isSetting_Value() {}

func (*Setting_BooleanValue) isSetting_Value() {}

func (*Setting_Float64Value) isSetting_Value() {}

func (*Setting_DatetimeValue) isSetting_Value() {}

var File_hi_proto protoreflect.FileDescriptor

var file_hi_proto_rawDesc = []byte{
	0x0a, 0x08, 0x68, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3c, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2e,
	0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0x52, 0x0a, 0x22, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a,
	0x1d, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x6d, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22,
	0x57, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6f,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x1f, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x4e, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x48, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x19, 0x46, 0x69, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0xb3, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x55,
	0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0xaa, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x36, 0x34, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x04, 0x32, 0x4a, 0x0a, 0x02, 0x48, 0x69, 0x12, 0x44, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xdd, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xc8, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x46, 0x69, 0x6e,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x68, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hi_proto_rawDescOnce sync.Once
	file_hi_proto_rawDescData = file_hi_proto_rawDesc
)

func file_hi_proto_rawDescGZIP() []byte {
	file_hi_proto_rawDescOnce.Do(func() {
		file_hi_proto_rawDescData = protoimpl.X.CompressGZIP(file_hi_proto_rawDescData)
	})
	return file_hi_proto_rawDescData
}

var file_hi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hi_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_hi_proto_goTypes = []any{
	(ValueFieldType)(0),                         // 0: proto.ValueFieldType
	(HealthCheckResponse_ServiceStatus)(0),      // 1: proto.HealthCheckResponse.ServiceStatus
	(*BaseResponse)(nil),                        // 2: proto.BaseResponse
	(*HealthCheckRequest)(nil),                  // 3: proto.HealthCheckRequest
	(*HealthCheckResponse)(nil),                 // 4: proto.HealthCheckResponse
	(*FindCodeValueListByCodeTypeRequest)(nil),  // 5: proto.FindCodeValueListByCodeTypeRequest
	(*FindOneCodeValueByCodeRequest)(nil),       // 6: proto.FindOneCodeValueByCodeRequest
	(*CodeValue)(nil),                           // 7: proto.CodeValue
	(*FindCodeValueListByCodeTypeResponse)(nil), // 8: proto.FindCodeValueListByCodeTypeResponse
	(*FindOneCodeValueByCodeResponse)(nil),      // 9: proto.FindOneCodeValueByCodeResponse
	(*FindSettingListByAppNameRequest)(nil),     // 10: proto.FindSettingListByAppNameRequest
	(*FindSettingListByAppNameResponse)(nil),    // 11: proto.FindSettingListByAppNameResponse
	(*FindSettingByNameRequest)(nil),            // 12: proto.FindSettingByNameRequest
	(*FindSettingByNameResponse)(nil),           // 13: proto.FindSettingByNameResponse
	(*Setting)(nil),                             // 14: proto.Setting
}
var file_hi_proto_depIdxs = []int32{
	1,  // 0: proto.HealthCheckResponse.status:type_name -> proto.HealthCheckResponse.ServiceStatus
	7,  // 1: proto.FindCodeValueListByCodeTypeResponse.codeValues:type_name -> proto.CodeValue
	7,  // 2: proto.FindOneCodeValueByCodeResponse.codeValue:type_name -> proto.CodeValue
	14, // 3: proto.FindSettingListByAppNameResponse.settings:type_name -> proto.Setting
	14, // 4: proto.FindSettingByNameResponse.setting:type_name -> proto.Setting
	0,  // 5: proto.Setting.valueType:type_name -> proto.ValueFieldType
	3,  // 6: proto.Hi.HealthCheck:input_type -> proto.HealthCheckRequest
	5,  // 7: proto.CodeValueService.FindListByCodeType:input_type -> proto.FindCodeValueListByCodeTypeRequest
	6,  // 8: proto.CodeValueService.FindOneByCode:input_type -> proto.FindOneCodeValueByCodeRequest
	10, // 9: proto.SettingsService.FindListByAppName:input_type -> proto.FindSettingListByAppNameRequest
	12, // 10: proto.SettingsService.FindByName:input_type -> proto.FindSettingByNameRequest
	4,  // 11: proto.Hi.HealthCheck:output_type -> proto.HealthCheckResponse
	8,  // 12: proto.CodeValueService.FindListByCodeType:output_type -> proto.FindCodeValueListByCodeTypeResponse
	9,  // 13: proto.CodeValueService.FindOneByCode:output_type -> proto.FindOneCodeValueByCodeResponse
	11, // 14: proto.SettingsService.FindListByAppName:output_type -> proto.FindSettingListByAppNameResponse
	13, // 15: proto.SettingsService.FindByName:output_type -> proto.FindSettingByNameResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_hi_proto_init() }
func file_hi_proto_init() {
	if File_hi_proto != nil {
		return
	}
	file_hi_proto_msgTypes[12].OneofWrappers = []any{
		(*Setting_StringValue)(nil),
		(*Setting_BooleanValue)(nil),
		(*Setting_Float64Value)(nil),
		(*Setting_DatetimeValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_hi_proto_goTypes,
		DependencyIndexes: file_hi_proto_depIdxs,
		EnumInfos:         file_hi_proto_enumTypes,
		MessageInfos:      file_hi_proto_msgTypes,
	}.Build()
	File_hi_proto = out.File
	file_hi_proto_rawDesc = nil
	file_hi_proto_goTypes = nil
	file_hi_proto_depIdxs = nil
}
